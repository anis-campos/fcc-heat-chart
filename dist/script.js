"use strict";

var dataUrl = "https://raw.githubusercontent.com/freeCodeCamp/ProjectReferenceData/master/global-temperature.json";
document.addEventListener("DOMContentLoaded", function () {
  var req = new XMLHttpRequest();
  req.open('GET', dataUrl, true);

  req.onreadystatechange = function () {
    var json;

    if (req.readyState === 4 && req.status === 200) {
      json = JSON.parse(req.responseText);
      setData(json);
    }
  };

  req.send();
});
var gradient = ["#313695", "#4575b4", "#74add1", "#abd9e9", "#e0f3f8", "#ffffbf", "#fee090", "#fdae61", "#f46d43", "#d73027", "#a50026"];
var months = ["january", "february", "march", "april", "may", "june", "july", "august", "september", "october", "november", "december"];
var h = 600,
    w = 1500,
    padding = 100;
d3.select('#holder').append('svg').attr('width', w).attr('height', h);
/**
 * Api object from FCC
 * @typedef {Object} ApiModel
 * @property {Number} year     - Year of the measurement
 * @property {Number} month    - Month of the measurement
 * @property {Number} variance - Variance of temperature with base year
 */

/**
 *
 * @param {Number} baseTemp
 * @param {[ApiModel]} dataset
 */

function setData(_ref) {
  var baseTemp = _ref.baseTemperature,
      dataset = _ref.monthlyVariance;

  /**
   *
   * @param {ApiModel} x
   * @return {Date}
   */
  var getDate = function getDate(x) {
    return new Date(x.year, x.month - 1, 1);
  };
  /**
   *
   * @param {ApiModel} x
   * @return {Number}
   */


  var getVariance = function getVariance(x) {
    return temperature(x.variance);
  };
  /**
   *
   * @param {Number} x
   * @return {Number}
   */


  var temperature = function temperature(x) {
    return baseTemp + x;
  };
  /**
   *
   * @param {number} x
   * @param {number} decimal
   * @return {number}
   */


  var precision = function precision(x) {
    var decimal = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
    return Math.round(x * Math.pow(10, decimal)) / Math.pow(10, decimal);
  };
  /**
   *
   * @type {Date[]}
   */


  var xDomain = [d3.min(dataset, getDate), d3.max(dataset, getDate)];
  /**
   *
   * @type {Number[]}
   */

  var yDomain = [d3.min(dataset, getVariance), d3.max(dataset, getVariance)];
  d3.select("#description").text("".concat(xDomain[0].getFullYear(), " - ").concat(xDomain[1].getFullYear(), ": base temperature ").concat(baseTemp, "\u2103"));
  var xScale = d3.scaleTime().domain(xDomain).range([padding, w - padding]);
  var yScale = d3.scaleLinear().domain([0.5, 12.5]).range([0, h - padding * 2]);
  var colorScale = d3.scaleQuantile().domain(yDomain).range(gradient);
  var xAxis = d3.axisBottom(xScale).tickSizeOuter(0).tickArguments([d3.timeYear.every(10)]),
      yAxis = d3.axisLeft(yScale).tickSizeOuter(0) //.ticks(12)
  .tickFormat(function (val, index) {
    return months[index];
  });
  var cellHeight = (h - 2 * padding) / months.length;
  var cellOffset = cellHeight / 2;
  var tooltip = d3.select('#tooltip');
  d3.select('svg').call(function (svg) {
    svg.selectAll('rect').data(dataset).enter().append('rect').attr('data-month', function (d) {
      return d.month - 1;
    }).attr('data-temp', function (d) {
      return d.variance;
    }).attr('data-year', function (d) {
      return d.year;
    }).attr('class', "cell").style('fill', function (d) {
      return colorScale(temperature(d.variance));
    }).attr('width', 5).attr('height', cellHeight).attr('x', function (d) {
      return xScale(new Date(d.year, 0, 1));
    }).attr('y', function (d) {
      return yScale(d.month) - cellOffset;
    }).on('mouseover', function (d) {
      var _d3$event = d3.event,
          x = _d3$event.pageX,
          y = _d3$event.pageY;
      tooltip.style("display", "block");
      tooltip.style("left", x + 20 + "px");
      var v = precision(d.variance);
      tooltip.html("".concat(d.year, " - ").concat(months[d.month - 1], "<BR>").concat(precision(baseTemp + d.variance), "\u2103<BR> ").concat(v > 0 ? '+' : '').concat(v, "\u2103"));
      var height = tooltip.node().getBoundingClientRect().height;
      tooltip.style("top", y - parseInt(height / 2) + "px");
      tooltip.attr('data-year', d.year);
    }).on('mouseout', function () {
      tooltip.style("display", "none");
    });
    svg.append('g').attr("id", "legend").attr('transform', "translate(".concat(padding, ",").concat(h - padding, ")")).call(function (g) {
      var width = 400;
      var height = 30;
      var min = yDomain[0];
      var max = yDomain[1];
      var step = (max - min) / gradient.length;
      var range = d3.range(min, max, step).map(function (x) {
        return precision(x);
      });
      console.log(range);
      var legendScale = d3.scaleLinear().domain([min, max]).range([0, width]);
      var values = range;
      var axis = d3.axisBottom(legendScale).tickSizeOuter(0).tickFormat(d3.format(".1f")).tickValues(range.slice(1));
      g.selectAll('rect').data(values).enter().append('rect').style('fill', function (d) {
        return colorScale(d);
      }).attr('width', function (x, i) {
        return (legendScale(range[i + 1]) || width) - legendScale(x);
      }).attr('height', height).attr('x', function (x) {
        return legendScale(x);
      }).attr('y', 0);
      g.append('g').attr("transform", "translate(-0.5,".concat(height, ")")).call(axis);
    });
    svg.append("g").attr('id', 'x-axis').attr("transform", "translate(0,".concat(h - padding * 2, ")")).call(xAxis);
    svg.append("g").attr('id', 'y-axis').attr("transform", "translate(".concat(padding, ",0)")).call(yAxis);
    svg.append("text").attr("class", "axisLabel").text('Years').style("text-anchor", "middle").attr("x", (w - padding) / 2).attr("y", h - padding * 2 + 40);
    svg.append("text").attr("class", "axisLabel").text('Months').style("text-anchor", "middle").attr("transform", "rotate(-90)").attr("x", -(h - padding * 2) / 2).attr("y", 40);
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,