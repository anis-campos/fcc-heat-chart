"use strict";var dataUrl="https://raw.githubusercontent.com/freeCodeCamp/ProjectReferenceData/master/global-temperature.json";document.addEventListener("DOMContentLoaded",function(){var a=new XMLHttpRequest;a.open("GET",dataUrl,!0),a.onreadystatechange=function(){var b;4===a.readyState&&200===a.status&&(b=JSON.parse(a.responseText),setData(b))},a.send()});var gradient=["#313695","#4575b4","#74add1","#abd9e9","#e0f3f8","#ffffbf","#fee090","#fdae61","#f46d43","#d73027","#a50026"],months=["january","february","march","april","may","june","july","august","september","october","november","december"],h=600,w=1500,padding=100;d3.select("#holder").append("svg").attr("width",w).attr("height",h);/**
 * Api object from FCC
 * @typedef {Object} ApiModel
 * @property {Number} year     - Year of the measurement
 * @property {Number} month    - Month of the measurement
 * @property {Number} variance - Variance of temperature with base year
 */ /**
 *
 * @param {Number} baseTemp
 * @param {[ApiModel]} dataset
 */function setData(a){var b=a.baseTemperature,c=a.monthlyVariance,d=function(a){return new Date(a.year,a.month-1,1)},e=function(a){return f(a.variance)},f=function(a){return b+a},g=function(a){var b=Math.pow,c=1<arguments.length&&void 0!==arguments[1]?arguments[1]:1;return Math.round(a*b(10,c))/b(10,c)},i=[d3.min(c,d),d3.max(c,d)],j=[d3.min(c,e),d3.max(c,e)];d3.select("#description").text("".concat(i[0].getFullYear()," - ").concat(i[1].getFullYear(),": base temperature ").concat(b,"\u2103"));var k=d3.scaleTime().domain(i).range([padding,w-padding]),l=d3.scaleLinear().domain([.5,12.5]).range([0,h-2*padding]),m=d3.scaleQuantile().domain(j).range(gradient),n=d3.axisBottom(k).tickSizeOuter(0).tickArguments([d3.timeYear.every(10)]),o=d3.axisLeft(l).tickSizeOuter(0)//.ticks(12)
.tickFormat(function(a,b){return months[b]}),p=(h-2*padding)/months.length,q=d3.select("#tooltip");d3.select("svg").call(function(a){a.selectAll("rect").data(c).enter().append("rect").attr("data-month",function(a){return a.month-1}).attr("data-temp",function(a){return a.variance}).attr("data-year",function(a){return a.year}).attr("class","cell").style("fill",function(a){return m(f(a.variance))}).attr("width",5).attr("height",p).attr("x",function(a){return k(new Date(a.year,0,1))}).attr("y",function(a){return l(a.month)-p/2}).on("mouseover",function(a){var c=d3.event,d=c.pageX,e=c.pageY;q.style("display","block"),q.style("left",d+20+"px");var f=g(a.variance);q.html("".concat(a.year," - ").concat(months[a.month-1],"<BR>").concat(g(b+a.variance),"\u2103<BR> ").concat(0<f?"+":"").concat(f,"\u2103"));var h=q.node().getBoundingClientRect().height;q.style("top",e-parseInt(h/2)+"px"),q.attr("data-year",a.year)}).on("mouseout",function(){q.style("display","none")}),a.append("g").attr("id","legend").attr("transform","translate(".concat(padding,",").concat(h-padding,")")).call(function(a){var b=30,c=j[0],d=j[1],e=(d-c)/gradient.length,f=d3.range(c,d,e).map(function(a){return g(a)});console.log(f);var h=d3.scaleLinear().domain([c,d]).range([0,400]),i=d3.axisBottom(h).tickSizeOuter(0).tickFormat(d3.format(".1f")).tickValues(f.slice(1));a.selectAll("rect").data(f).enter().append("rect").style("fill",function(a){return m(a)}).attr("width",function(a,b){return(h(f[b+1])||400)-h(a)}).attr("height",b).attr("x",function(a){return h(a)}).attr("y",0),a.append("g").attr("transform","translate(-0.5,".concat(b,")")).call(i)}),a.append("g").attr("id","x-axis").attr("transform","translate(0,".concat(h-2*padding,")")).call(n),a.append("g").attr("id","y-axis").attr("transform","translate(".concat(padding,",0)")).call(o),a.append("text").attr("class","axisLabel").text("Years").style("text-anchor","middle").attr("x",(w-padding)/2).attr("y",h-2*padding+40),a.append("text").attr("class","axisLabel").text("Months").style("text-anchor","middle").attr("transform","rotate(-90)").attr("x",-(h-2*padding)/2).attr("y",40)})}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,