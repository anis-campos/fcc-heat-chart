"use strict";var dataUrl="https://raw.githubusercontent.com/freeCodeCamp/ProjectReferenceData/master/global-temperature.json";document.addEventListener("DOMContentLoaded",function(){var a=new XMLHttpRequest;a.open("GET",dataUrl,!0),a.onreadystatechange=function(){var b;4===a.readyState&&200===a.status&&(b=JSON.parse(a.responseText),setData(b))},a.send()});var gradient=["#313695","#4575b4","#74add1","#abd9e9","#e0f3f8","#ffffbf","#fee090","#fdae61","#f46d43","#d73027","#a50026"],months=["january","february","march","april","may","june","july","august","september","october","november","december"],h=600,w=1500,padding=100;d3.select("#holder").append("svg").attr("width",w).attr("height",h);/**
 * Api object from FCC
 * @typedef {Object} ApiModel
 * @property {Number} year     - Year of the measurement
 * @property {Number} month    - Month of the measurement
 * @property {Number} variance - Variance of temperature with base year
 */ /**
 *
 * @param {Number} baseTemp
 * @param {[ApiModel]} dataset
 */function setData(a){var b=a.baseTemperature,c=a.monthlyVariance,d=function(a){return new Date(a.year,a.month-1,1)},e=function(a){return f(a.variance)},f=function(a){return b+a},g=[d3.min(c,d),d3.max(c,d)],i=[d3.min(c,e),d3.max(c,e)];console.log(i);var j=d3.scaleTime().domain(g).range([padding,w-padding]),k=d3.scaleLinear().domain([.5,12.5]).range([padding,h-padding]),l=d3.scaleQuantile().domain(i).range(gradient),m=d3.axisBottom(j).tickSizeOuter(0).tickArguments([d3.timeYear.every(10)]),n=d3.axisLeft(k).tickSizeOuter(0)//.ticks(12)
.tickFormat(function(a,b){return months[b]}),o=(h-2*padding)/months.length;d3.select("svg").call(function(a){a.append("g").attr("id","legend").attr("transform","translate(".concat(padding,",").concat(h-padding/2,")")).call(function(a){var b=30,c=i[0],d=i[1],e=(d-c)/gradient.length,f=d3.range(c,d,e);console.log(f);var g=d3.scaleLinear().domain(i).range([0,400]),h=d3.axisBottom(g).tickSizeOuter(0).tickFormat(d3.format(".1f")).tickValues(f);a.selectAll("rect").data(f).enter().append("rect").style("fill",function(a){return l(a)}).attr("width",400/gradient.length).attr("height",b).attr("x",function(a){return g(a)}).attr("y",0),a.append("g").attr("transform","translate(0,".concat(b,")")).call(h)}),a.selectAll("rect").data(c).enter().append("rect").attr("data-month",function(a){return a.month-1}).attr("data-temp",function(a){return a.variance}).attr("data-year",function(a){return a.year}).attr("class","cell").style("fill",function(a){return l(f(a.variance))}).attr("width",5).attr("height",o).attr("x",function(a){return j(new Date(a.year,0,1))}).attr("y",function(a){return k(a.month)-o/2}),a.append("g").attr("id","x-axis").attr("transform","translate(0,".concat(h-padding,")")).call(m),a.append("g").attr("id","y-axis").attr("transform","translate(".concat(padding,",0)")).call(n),a.append("text").attr("class","axisLabel").text("Years").style("text-anchor","middle").attr("x",(w-padding)/2).attr("y",h-padding+40),a.append("text").attr("class","axisLabel").text("Months").style("text-anchor","middle").attr("transform","rotate(-90)").attr("x",-h/2).attr("y",40)})}/**
 *
 * @param {ApiModel} d
 */function handleMouseOver(a,b){var c=d3.select(this),d=a.tooltip,e=d3.event,f=e.pageX,g=e.pageY;d.style("display","block"),d.style("left",f+20+"px"),d.html(toolTipHtml(b));var h=d.node().getBoundingClientRect().height;d.style("top",g-parseInt(h/2)+"px"),d.attr("data-year",b.Year),c.transition().duration(100).attr("r",10)}function handleMouseOut(a){var b=a.tooltip;b.style("display","none");var c=d3.select(this);c.transition().duration(100).attr("r",8)}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,